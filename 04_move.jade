include revealjs

+slides('Move Semantics')

    section
        h1 Move Semantics

    section
        h2 Contents
        ul
            li
                code auto
            li Return Value Optimization
            li Move Semantics
            li Sink functions

    section
        h2
            code auto
        p Used to denote that a variable has automatic storage.
        p In C++ all variables have automatic storage by default.

    section
        h2
            code auto
        p
            :markdown

                In C++11 it gets a new meaning - tells the compiler to deduce
                the type of the variable. This is called [type
                inference](http://en.wikipedia.org/wiki/Type_inference)

    section
        :cxx
            int x = 42;
            std::string s = "the answer is";

            auto y = 2 * x; // 2 is int, int * int = int, so y is int
            auto t = s + "!"; // std::string + "!" is string, so t is string


    section
        :markdown
            ## Benefits of ```auto```
        ul
            li.fragment.fade-in saves time determing what is the correct type
            li.fragment.fade-in allows to refactor the code by renaming a type
            li.fragment.fade-in allows to change the type as long as it
                | behaves in the same way
    section
        :cxx
            BOOL result = ::CreateProcess(...);
            if (!result)
            {
                DWORD error = ::GetLastError();
                std::cout << "Could not create process " << error
                    << std::endl;
            }
    section
        :cxx
            // don't care what type it is as long as it behaves as a bool
            auto result = ::CreateProcess(...);
            if (!result)
            {
                // don't care what type it is as long as it can be logged
                auto error = ::GetLastError();
                std::cout << "Could not create process " << error
                    << std::endl;
            }

        p.fragment.fade-in Bonus: I don't get shouted at

    section
        :cxx
            std::vector<int> v;
            // ...
            auto begin = v.cbegin();
            std::vector<int>::const_interator begin2 = v.cbegin();

    section
        :markdown
            ## ```auto``` gotchas

            * gets the result by value

        :cxx
            struct Course {
                std::vector<int>& get_students() const;
            }

            // ...

            auto students = course.get_students();
            course.get_students()[0] = 24;
            students[0] = 42;
            std::cout << course.get_students()[0] << std::endl;
            // it is still 24
            // students is actually a copy

    section
        :cxx
            auto& students = course.get_students();
            course.get_students()[0] = 24;
            students[0] = 42;
            std::cout << course.get_students()[0] << std::endl;
            // it is 42

        :markdown
            The difference is only the **&** after auto

    section
        p Taking a const reference with auto
        :cxx
            const auto& students = course.get_students();

    section
        h2 Return Value Optimization
        p.fragment.fade-in RVO

    section
        h2 Values returned from functions are copied in the local variables

    section
        :cxx
            std::vector<int> get_random_ints(int count);
            // ...
            auto numbers = get_random_ints(1000);

    section
        p You can get advice to not return such expensive to copy things by
        | value

        :cxx
            void get_random_ints(int count, std::vector<int>& numbers);
            // ...
            std::vector<int> numbers;
            get_random_ints(1000, numbers);

        ul.fragment.fade-in
            li more code
            li difficult to compose

    section
        h2 Optimizations
        p Compilers are allowed to make any optimization as long as the
            | program behaves in the same way as if there are no optimizations

    section
        h2 RVO
        p C++ allows compilers to implement RVO even breaking this rule

    section
        h2 How is RVO implemented by compilers :cxx std::vector<int> get_random_ints(int count);
            // ...
            auto numbers = get_random_ints(1000);

        p Gets compiled as
            :cxx
                void get_random_ints(int count, std::vector<int>& numbers);
                // ...
                std::vector<int> numbers;
                get_random_ints(1000, numbers);

    section
        h3 RVO doesn't always work
        :cxx
            std::vector<int> get_numbers() {
                std::vector<int> result;
                // ...
                return (rand() % 2)? result : std::vector<int>();
            }

    section
        h2 Move
        p.fragment.fade-in.

            Instead of copying values move them directly into their new
            variables

    section
        :markdown
            ## Move

            In C++ it is easy to create unneccessary copies of object,
            hurting performance.

    section
        :cxx
            std::string s = "Hello";
            std::string t = "World";
            std::string m = s + t;

        p.fragment.fade-in
            :markdown

                *```s```* is concatenated with *```t```* in a temporary string
                which is then copied into *```m```*

                *assuming that the compiler will not optimize the code*

    section
        :markdown
            ## *lvalues* and *rvalues*

            * comes from C
            * *lvalues* are on the left side of ```operator =```
            * *rvalues* are on the right side of ```operator =```
    section
        :markdown
            ## *lvalues* and *rvalues*

            * In C++
            * *lvalues* are variables - names of the values, storage for the
                value
            * *rvalues* are values of expressions

    section
        ul
            li.fragment.fade-in lvalue reference
                code T&
            li.fragment.fade-in rvalue reference
                code T&&


    section
        :markdown
            ## ```const T&```

            Can reference everything - values stored in variables, result
            values of expressions.

    section
        :markdown
            ## ```const T&&```

            Can reference only result values of expressions

    section
        :cxx
            void function(const std::string& lvalue);  // lvalue overload
            void function(const std::string&& rvalue); // rvalue overload

        Given both declarations the compiler choose which overload to call,
        based on the type of the string value function is called.

    section
        :cxx
            std::string s = "Hello World";
            function(s); // lvalue overload

            function("Hello World"); // rvalue overload
            // the const char* is converted in temporary string, which can be
            // rvalue

    section
        :cxx
            class String {
            public:
                String(const char* s)
                    : m_Length(std::strlen(s))
                    , m_Buffer(new char[m_Length])
                {
                    std::memcpy(m_Buffer, s, m_Length);
                }

                ~String() {
                    delete [] m_Buffer;
                }

            private:
                size_t m_Length;
                char* m_Buffer;
            };
    section
        h3 String representation
        img(width="100%" src="03_move/storage.svg")

    section
        h3 Copy constructor
        :cxx
            String(const String& o)
                : m_Length(o.m_Length)
                , m_Buffer(new char[m_Length])
            {
                std::memcpy(m_Buffer, o.m_Buffer, m_Length);
            }
        p Create a copy of the other string

    section
        h3 Copy construction
        img(width="100%" src="03_move/copy.svg")

    section
        h3 Move constructor
        :cxx
            class String {
                // ...
                String(String&& o)
                    : m_Buffer(o.m_Buffer);
                    , m_Length(o.m_Length)
                {
                    o.m_Buffer = nullptr;
                    o.m_Length = 0;
                }

            String(const String&& o)
        p Moves the value of the other string into this object

    section
        h3 Move construction
        img(width="100%" src="03_move/move.svg")

    section
        :cxx
            String s("Hello");
            String t("World");

            String s2 = s; // copy
            String t2 = s + t; // move

    section
        :markdown
            ## ```std::move```

            Tells the compiler to create an rvalue reference for a lvalue.
            Allows us to move ordinary values stored in variables.

    section
        :cxx
            template <typename T>
            T&& std::move(T& lvalue);
    section
        :cxx
            String s("Hello");
            String t = std::move(s); // move s into t

            // !!! Undefined behavior !!!
            std::cout << s << std::endl;
            // We have moved s into t, it's value is unknown

    section
        h2 Asignment operator

        :cxx
            class String {
                // ..

                String& operator= (const String& rhs) {
                    if (this != &rhs) {
                        delete [] m_Buffer;
                        m_Length = o.m_Length;
                        m_Buffer = new char[rhs.m_Length];
                        std::memcpy(m_Buffer, rhs.m_Buffer, m_Length);
                    }
                    return *this;
                }
    section
        h2 Asignment operator
        p before
        img(width = '100%' src='03_move/assign.svg')

    section
        h2 Asignment operator
        p after
        img(width = '100%' src='03_move/copy_assign.svg')

    section
        h2 Move asignment

        :cxx
            class String {
                // ..
                // move assignment
                String& operator= (String&& rhs) {
                    if (this != &rhs) {
                        delete [] m_Buffer;
                        m_Length = o.m_Length;
                        m_Buffer = rhs.m_Buffer;
                        rhs.m_Buffer = nullptr;
                    }
                    return *this;
                }
            };

    section
        h2 Move Assignment
        p before
        img(width = '100%' src='03_move/assign.svg')

    section
        h2 Move Asignment
        p after
        img(width = '100%' src='03_move/move_assign_1.svg')

    section
        h2 Copy or Move?
        :cxx
            String s = "Hello";
            String t = "World";

            String m = s + t; // 1
            m = t + s; // 2

            m = t; // 3
            m = std::move(s); // 4
        ol
            li.fragment.fade-in move
            li.fragment.fade-in move
            li.fragment.fade-in copy
            li.fragment.fade-in move

    section
        h2 Move asignment - alternative implementation

        :cxx
            class String {
                // ..
                // move assignment
                String& operator= (String&& rhs) {
                    std::swap(m_Buffer, rhs.m_Buffer);
                    std::swap(m_Length, rhs.m_Length);
                    return *this;
                }
            };

    section
        h2 Move Assignment - alternative implementation
        p before
        img(width = '100%' src='03_move/assign.svg')

    section
        h2 Move Asignment - alternative implementation
        p after
        img(width = '100%' src='03_move/move_assign_2_1.svg')

    section
        h2 Move Asignment - alternative implementation
        p in the end
        img(width = '100%' src='03_move/move_assign_2.svg')

    section
        strong.

            Although the value of an object may be moved, the object still is
            going to be destoyed (its constructor has been run)

    section
        h2 Always leave moved object in a consistent state
        p So that their destructor will run correctly.

